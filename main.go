package main

import (
	"database/sql"
	"fmt"
	"log"
	"time"

	_ "github.com/mattn/go-sqlite3"
	"gopkg.in/telebot.v3"
)

// UserData —Ç–µ–ø–µ—Ä—å —Ö—Ä–∞–Ω–∏—Ç—Å—è –≤ SQLite
type PushupRecord struct {
	Date         string // "YYYY-MM-DD"
	PushupsCount int
}

var db *sql.DB

func main() {
	// –ü–æ–¥–∫–ª—é—á–∞–µ–º SQLite
	var err error
	db, err = sql.Open("sqlite3", "./pushups.db")
	if err != nil {
		log.Fatal(err)
	}
	defer db.Close()

	// –°–æ–∑–¥–∞—ë–º —Ç–∞–±–ª–∏—Ü—É, –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
	_, err = db.Exec(`
		CREATE TABLE IF NOT EXISTS pushups (
			user_id INTEGER,
			date TEXT,
			count INTEGER,
			PRIMARY KEY (user_id, date)
		)
	`)
	if err != nil {
		log.Fatal(err)
	}

	// –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –±–æ—Ç–∞
	bot, err := telebot.NewBot(telebot.Settings{
		Token:  "YOUR_TELEGRAM_BOT_TOKEN", // –ó–∞–º–µ–Ω–∏ –Ω–∞ —Å–≤–æ–π —Ç–æ–∫–µ–Ω
		Poller: &telebot.LongPoller{Timeout: 10 * time.Second},
	})
	if err != nil {
		log.Fatal(err)
	}

	// –ö–æ–º–∞–Ω–¥—ã
	bot.Handle("/start", onStart)
	bot.Handle("/add", onAddPushups)
	bot.Handle("/progress", onProgress)
	bot.Handle("/calendar", onCalendar)

	// –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –∫–∞–∂–¥—ã–π –¥–µ–Ω—å –≤ 20:00
	go sendDailyReminders(bot)

	log.Println("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω!")
	bot.Start()
}

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
func onStart(c telebot.Context) error {
	return c.Send(
		"üèãÔ∏è‚Äç‚ôÇÔ∏è <b>–¢—Ä–µ–∫–µ—Ä 100 –æ—Ç–∂–∏–º–∞–Ω–∏–π –≤ –¥–µ–Ω—å</b>\n\n"+
			"–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"+
			"/add <—á–∏—Å–ª–æ> ‚Äî –¥–æ–±–∞–≤–∏—Ç—å –æ—Ç–∂–∏–º–∞–Ω–∏—è\n"+
			"/progress ‚Äî —Ç–µ–∫—É—â–∏–π –ø—Ä–æ–≥—Ä–µ—Å—Å\n"+
			"/calendar ‚Äî –∏—Å—Ç–æ—Ä–∏—è –∑–∞ –Ω–µ–¥–µ–ª—é\n\n"+
			"<i>–¶–µ–ª—å: 100 –æ—Ç–∂–∏–º–∞–Ω–∏–π –µ–∂–µ–¥–Ω–µ–≤–Ω–æ!</i>",
		telebot.ModeHTML,
	)
}

func onAddPushups(c telebot.Context) error {
	userID := c.Sender().ID
	count := 0

	if len(c.Args()) == 0 {
		return c.Send("–ò—Å–ø–æ–ª—å–∑—É–π: /add <—á–∏—Å–ª–æ>")
	}
	if _, err := fmt.Sscan(c.Args()[0], &count); err != nil || count <= 0 {
		return c.Send("‚ùå –í–≤–µ–¥–∏ —á–∏—Å–ª–æ –±–æ–ª—å—à–µ 0!")
	}

	// –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ SQLite
	today := time.Now().Format("2006-01-02")
	_, err := db.Exec(`
		INSERT INTO pushups (user_id, date, count)
		VALUES (?, ?, ?)
		ON CONFLICT(user_id, date) DO UPDATE SET count = count + ?
	`, userID, today, count, count)
	if err != nil {
		log.Println("DB error:", err)
		return c.Send("‚ùå –û—à–∏–±–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö!")
	}

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º, –¥–æ—Å—Ç–∏–≥–Ω—É—Ç–∞ –ª–∏ —Ü–µ–ª—å
	var totalToday int
	db.QueryRow(`
		SELECT count FROM pushups 
		WHERE user_id = ? AND date = ?
	`, userID, today).Scan(&totalToday)

	if totalToday >= 100 {
		return c.Send(fmt.Sprintf("üî• <b>–¢—ã –≤—ã–ø–æ–ª–Ω–∏–ª 100 –æ—Ç–∂–∏–º–∞–Ω–∏–π —Å–µ–≥–æ–¥–Ω—è!</b> –¢–∞–∫ –¥–µ—Ä–∂–∞—Ç—å!", totalToday),
			telebot.ModeHTML)
	}
	return c.Send(fmt.Sprintf("‚úÖ +%d –æ—Ç–∂–∏–º–∞–Ω–∏–π! –í—Å–µ–≥–æ —Å–µ–≥–æ–¥–Ω—è: %d/100\n–û—Å—Ç–∞–ª–æ—Å—å: %d",
		count, totalToday, 100-totalToday))
}

func onProgress(c telebot.Context) error {
	userID := c.Sender().ID
	today := time.Now().Format("2006-01-02")
	var count int

	err := db.QueryRow(`
		SELECT count FROM pushups 
		WHERE user_id = ? AND date = ?
	`, userID, today).Scan(&count)

	if err == sql.ErrNoRows {
		return c.Send("üìå –°–µ–≥–æ–¥–Ω—è —Ç—ã –µ—â—ë –Ω–µ –¥–µ–ª–∞–ª –æ—Ç–∂–∏–º–∞–Ω–∏–π. –í–ø–µ—Ä—ë–¥ –∫ —Ü–µ–ª–∏!")
	} else if err != nil {
		return c.Send("‚ùå –û—à–∏–±–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö!")
	}

	progressBar := getProgressBar(count, 100)
	return c.Send(fmt.Sprintf(
		"üìä <b>–ü—Ä–æ–≥—Ä–µ—Å—Å –∑–∞ —Å–µ–≥–æ–¥–Ω—è:</b>\n\n%s\n%d –∏–∑ 100 –æ—Ç–∂–∏–º–∞–Ω–∏–π\n–û—Å—Ç–∞–ª–æ—Å—å: %d",
		progressBar, count, 100-count,
	), telebot.ModeHTML)
}

func onCalendar(c telebot.Context) error {
	userID := c.Sender().ID
	rows, err := db.Query(`
		SELECT date, count FROM pushups 
		WHERE user_id = ? 
		ORDER BY date DESC 
		LIMIT 7
	`, userID)
	if err != nil {
		return c.Send("‚ùå –û—à–∏–±–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö!")
	}
	defer rows.Close()

	var calendarText string = "üìÖ <b>–ü–æ—Å–ª–µ–¥–Ω–∏–µ 7 –¥–Ω–µ–π:</b>\n\n"
	for rows.Next() {
		var date string
		var count int
		rows.Scan(&date, &count)
		progressBar := getProgressBar(count, 100)
		calendarText += fmt.Sprintf("<i>%s:</i> %s <b>%d</b>/100\n", date, progressBar, count)
	}

	return c.Send(calendarText, telebot.ModeHTML)
}

// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
func getProgressBar(current, max int) string {
	const barLength = 10
	filled := int(float64(current) / float64(max) * barLength)
	bar := ""
	for i := 0; i < barLength; i++ {
		if i < filled {
			bar += "‚ñ†"
		} else {
			bar += "‚ñ°"
		}
	}
	return bar
}

func sendDailyReminders(bot *telebot.Bot) {
	for {
		now := time.Now()
		next := time.Date(now.Year(), now.Month(), now.Day()+1, 20, 0, 0, 0, now.Location())
		time.Sleep(time.Until(next))

		rows, err := db.Query(`
			SELECT user_id, count FROM pushups 
			WHERE date = ?
		`, now.Format("2006-01-02"))
		if err != nil {
			log.Println("Reminder DB error:", err)
			continue
		}

		for rows.Next() {
			var userID int64
			var count int
			rows.Scan(&userID, &count)

			if count < 100 {
				bot.Send(telebot.ChatID(userID), fmt.Sprintf(
					"‚è∞ <b>–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ</b>\n–°–µ–≥–æ–¥–Ω—è —Ç—ã —Å–¥–µ–ª–∞–ª %d/100 –æ—Ç–∂–∏–º–∞–Ω–∏–π.\n–û—Å—Ç–∞–ª–æ—Å—å –≤—Å–µ–≥–æ %d! üí™",
					count, 100-count,
				), telebot.ModeHTML)
			}
		}
		rows.Close()
	}
}
